1-Create a Simple JSX Element
const JSX = <h1>Hello JSX!</h1>;
...................................................................................................
2-Create a Complex JSX Element
const JSX=
<div>
<h1>Numbers</h1>
<p>the number is</p>
<ul>
<li>1</li>
<li>2</li>
<li>3</li>
</ul>
</div>
...................................................................................................
3-Add Comments in JSX
const JSX = (
  <div>
  {/* comment*/}
    <h1>This is a block of JSX</h1>
    <p>Here's a subtitle</p>
  </div>
);
...................................................................................................
4-Render HTML Elements to the DOM
const JSX = (
  <div>
    <h1>Hello World</h1>
    <p>Lets render this to the DOM</p>
  </div>
);
// Add your code below this line
ReactDOM.render(JSX,document.getElementById("challenge-node"))
...................................................................................................
5-Define an HTML Class in JSX
const JSX = (
  <div className="myDiv">
    <h1>Add a class to this div</h1>
  </div>
);
...................................................................................................
6-Learn About Self-Closing JSX Tags
const JSX = (
  <div>
    <h2>Welcome to React!</h2> <br ></br>
    <p>Be sure to close all tags!</p>
    <hr></hr>
  </div>
);
...................................................................................................
7-Create a Stateless Functional Component
const MyComponent = function() {
  // Change code below this line
return(
   <div>Muhammad</div>
)
  // Change code above this line
}
...................................................................................................
8-Create a React Component
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    // Change code below this line
    return(
<div>
<h1>Hello React!</h1>
</div>
    )
    // Change code above this line
  }
};
...................................................................................................
9-Create a Component with Composition
const ChildComponent = () => {
  return (
    <div>
      <p>I am the child</p>
    </div>
  );
};

class ParentComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>I am the parent</h1>
        { /* Change code below this line */ }

<ChildComponent/>
        { /* Change code above this line */ }
      </div>
    );
  }
};
...................................................................................................
10-Use React to Render Nested Components
const TypesOfFruit = () => {
  return (
    <div>
      <h2>Fruits:</h2>
      <ul>
        <li>Apples</li>
        <li>Blueberries</li>
        <li>Strawberries</li>
        <li>Bananas</li>
      </ul>
    </div>
  );
};

const Fruits = () => {
  return (
    <div>
      { /* Change code below this line */ }
<TypesOfFruit/>
      { /* Change code above this line */ }
    </div>
  );
};

class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        { /* Change code below this line */ }
<Fruits/>
        { /* Change code above this line */ }
      </div>
    );
  }
};
...................................................................................................
